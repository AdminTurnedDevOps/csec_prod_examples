name: 'DevSecOps CI Process Example'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: CI Test
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4


    #### Scorecard ####
      # Scorecard is a way to help improve security practices. It's an automated tool that
      # assesses a number of important heuristics ("checks") associated with software security and assigns each check a score of 0-10.
      # The checks are found here: https://github.com/ossf/scorecard?tab=readme-ov-file#scorecard-checks

    # - name: "Run analysis"
    #   uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736 # v2.3.1
    #   with:
    #     results_file: results.sarif
    #     results_format: sarif
    #     publish_results: true


#### SNYK TESTING #####

      # Notice how the Org and Snyk Token is a GitHub Action Secret. This is to ensure no "secrets" are exposed in plain text.
      # If you want the results to be sent to the Snyk Dashboard for constant monitoring, you can use `snyk monitor` instead.
    - name: Set up Snyk CLI to check for security issues
      uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
    
    - name: Snyk Auth
      run: snyk auth ${{ secrets.snykToken }}
    
    - name: Snyk SCA Go
      run: snyk test webappsfortesting/gowebapi --org=${{ secrets.snykOrg }}

    - name: Snyk SCA Python
      run: |
        pip3 install -r webappsfortesting/pyweb/requirements.txt
        snyk test webappsfortesting/gowebapi --org=${{ secrets.snykOrg }}

    - name: Snyk SAST
      run: snyk code test webappsfortesting/gowebapi --org=${{ secrets.snykOrg }}
      #run: snyk code test webappsfortesting/pyweb --org=${{ secrets.snykOrg }}

    - name: Build a Docker image to test for vulnerabilities
      working-directory: webappsfortesting/gowebapi
      run: docker build -t gowebapi .
    - name: Snyk Container monitor
      run: snyk container test gowebapi --file=webappsfortesting/gowebapi/Dockerfile

      # Add abililty to test the container image with Snyk


      

    # - name: Install kubectl
    #   run: |
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    #     echo "$(<kubectl.sha256) kubectl" | sha256sum --check

    #     sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
    #     kubectl version --client
    
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    
    # - name: Terraform Init
    #   working-directory: aks
    #   run: terraform init
           
    # - name: Terraform Format
    #   working-directory: aks
    #   run: terraform fmt
    
    # - name: Terraform Plan
    #   working-directory: aks
    #   run: terraform plan
    
    # - name: Terraform Apply
    #   working-directory: aks
    #   run: terraform apply -auto-approve
