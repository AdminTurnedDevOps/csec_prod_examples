name: 'DevSecOps CI Process Example'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: CI Test
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Snyk CLI to check for security issues
      uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

#### SNYK TESTING #####

      # Notice how the org is a GitHub Action Secret. This is to ensure no "secrets" are exposed in plain text.
      # If you want the results to be sent to the Snyk Dashboard for constant monitoring, you can use `snyk monitor` instead.
    - name: Snyk Auth
      run: snyk auth ${{ secrets.snykToken }}
    
    - name: Snyk SCA
      run: snyk test webappsfortesting/gowebapi --org=${{ secrets.snykOrg }}

    - name: Snyk SAST
      run: snyk code test webappsfortesting/gowebapi --org=${{ secrets.snykOrg }}
      #run: snyk code test webappsfortesting/pyweb --org=${{ secrets.snykOrg }}

    - name: Build a Docker image
      working-directory: webappsfortesting/gowebapi
      run: docker build . -t gowebapi 

      # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
    - name: Snyk Container monitor
      run: snyk container test gowebapi --file=webappsfortesting/gowebapi/Dockerfile


      

    # - name: Install kubectl
    #   run: |
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    #     echo "$(<kubectl.sha256) kubectl" | sha256sum --check

    #     sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
    #     kubectl version --client
    
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    
    # - name: Terraform Init
    #   working-directory: aks
    #   run: terraform init
           
    # - name: Terraform Format
    #   working-directory: aks
    #   run: terraform fmt
    
    # - name: Terraform Plan
    #   working-directory: aks
    #   run: terraform plan
    
    # - name: Terraform Apply
    #   working-directory: aks
    #   run: terraform apply -auto-approve
